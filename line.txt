import urllib.request
import cv2
import numpy as np
import matplotlib.pyplot as plt
from ipywidgets import interact, IntSlider

# ------------------------------
# (0) 인터넷에서 도로 이미지를 불러오기
# ------------------------------
url = "https://github.com/GyuyeongKim/autocar/blob/main/test_img.jpg?raw=true"
req = urllib.request.urlopen(url)
arr = np.asarray(bytearray(req.read()), dtype=np.uint8)
img_bgr = cv2.imdecode(arr, cv2.IMREAD_COLOR)  # OpenCV BGR 포맷
img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)  # Matplotlib 시각화(RGB)

H, W = img_bgr.shape[:2]  # 이미지 높이, 너비

# ROI(사다리꼴) 설정 예시
roi_vertices = np.array([[
    (0, H),                   
    (int(W*0.45), int(H*0.6)),
    (int(W*0.55), int(H*0.6)),
    (W, H)                    
]], dtype=np.int32)

# ------------------------------
# (A) 보조 함수들
# ------------------------------
def region_of_interest(img, vertices):
    """ 다각형(ROI) 내부만 살리고 외부는 0(검정)으로 마스킹 """
    mask = np.zeros_like(img)
    if len(img.shape) > 2:
        channel_count = img.shape[2]
        ignore_color = (255,) * channel_count
    else:
        ignore_color = 255
    cv2.fillPoly(mask, vertices, ignore_color)
    return cv2.bitwise_and(img, mask)

def draw_lines(img_shape, lines, color=(255, 0, 0), thickness=5):
    """ 
    img_shape 크기만한 검정 배경 위에 검출된 선들을 그려 반환 
    (line_img.shape=(H,W,3))
    """
    line_img = np.zeros((img_shape[0], img_shape[1], 3), dtype=np.uint8)
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line[0]
            cv2.line(line_img, (x1, y1), (x2, y2), color, thickness)
    return line_img

# ------------------------------
# (B) 차선 인식 파이프라인 + 단계별 시각화
# ------------------------------
def lane_detection_pipeline(
    canny_lower_threshold,
    canny_upper_threshold,
    hough_threshold,
    minimum_line_length,
    maximum_line_gap
):
    """
    1) Original (RGB)
    2) Grayscale
    3) GaussianBlur
    4) Canny
    5) ROI
    6) Hough Lines Only
    7) Final Overlay
    => 3행 × 3열(총 9칸) 중 7칸 사용
    """

    # 1) Original (RGB)
    original = img_rgb

    # 2) Grayscale
    gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)

    # 3) GaussianBlur
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # 4) Canny
    edges = cv2.Canny(blurred, canny_lower_threshold, canny_upper_threshold)

    # 5) ROI
    roi_img = region_of_interest(edges, roi_vertices)

    # 6) HoughLines
    lines = cv2.HoughLinesP(
        roi_img,
        rho=1,
        theta=np.pi/180,
        threshold=hough_threshold,
        minLineLength=minimum_line_length,
        maxLineGap=maximum_line_gap
    )
    line_img_bgr = draw_lines((H, W), lines, color=(255, 0, 0), thickness=5)
    line_img_rgb = cv2.cvtColor(line_img_bgr, cv2.COLOR_BGR2RGB)

    # 7) Overlay (원본 + 차선)
    overlay = cv2.addWeighted(original, 0.8, line_img_rgb, 1.0, 0)

    # ---------- 서브플롯(3행×3열) ----------
    fig, axes = plt.subplots(nrows=3, ncols=3, figsize=(15, 10))

    # (0,0) 1) Original
    axes[0, 0].imshow(original)
    axes[0, 0].set_title("1) Original (RGB)")
    axes[0, 0].axis("off")

    # (0,1) 2) Grayscale
    axes[0, 1].imshow(gray, cmap='gray')
    axes[0, 1].set_title("2) Grayscale")
    axes[0, 1].axis("off")

    # (0,2) 3) GaussianBlur
    axes[0, 2].imshow(blurred, cmap='gray')
    axes[0, 2].set_title("3) Gaussian Blur")
    axes[0, 2].axis("off")

    # (1,0) 4) Canny
    axes[1, 0].imshow(edges, cmap='gray')
    axes[1, 0].set_title(f"4) Canny ({canny_lower_threshold}, {canny_upper_threshold})")
    axes[1, 0].axis("off")

    # (1,1) 5) ROI
    axes[1, 1].imshow(roi_img, cmap='gray')
    axes[1, 1].set_title("5) ROI")
    axes[1, 1].axis("off")

    # (1,2) 6) Hough Lines
    axes[1, 2].imshow(line_img_rgb)
    axes[1, 2].set_title("6) Hough Lines")
    axes[1, 2].axis("off")

    # (2,0) 7) Final Overlay
    axes[2, 0].imshow(overlay)
    axes[2, 0].set_title("7) Final Overlay")
    axes[2, 0].axis("off")

    # 남은 (2,1), (2,2)는 비움
    axes[2, 1].axis("off")
    axes[2, 2].axis("off")

    plt.tight_layout()
    plt.show()

# ------------------------------
# (C) 슬라이더(Trackbar) 구현
# ------------------------------
interact(
    lane_detection_pipeline,
    canny_lower_threshold = IntSlider(
        value=50, min=0, max=255, step=1, description="Canny Low Thr."
    ),
    canny_upper_threshold = IntSlider(
        value=150, min=0, max=255, step=1, description="Canny High Thr."
    ),
    hough_threshold = IntSlider(
        value=50, min=1, max=200, step=1, description="Hough Thr."
    ),
    minimum_line_length = IntSlider(
        value=20, min=1, max=300, step=1, description="Min. Line Len."
    ),
    maximum_line_gap = IntSlider(
        value=10, min=1, max=300, step=1, description="Max. Line Gap"
    )
);
